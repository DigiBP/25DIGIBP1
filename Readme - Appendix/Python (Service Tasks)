# Service Task Implementation (Python External Tasks)
Several steps in the BPMN process are automated through service tasks implemented as external task workers in Python. A set of 19 Python scripts (available in the repository’s Python folder, see “Python - Kopie.zip”) comprise the logic for these tasks. Each script corresponds to a specific service task in the BPMN model, named to reflect its function. Table 2 lists the key Python scripts, the BPMN service task names, and their inferred purposes (based on the script filenames and process context):

| **Script Name**                     | **BPMN Service Task**             | **Purpose (Inferred from Filename)**                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| ----------------------------------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `send_email_submitter_initial.py`   | **Send Submission Confirmation**  | Sends a confirmation email to the feedback submitter after the initial submission is received. Informs the submitter that their feedback was logged and provides a reference ID for future communication.                                                                                                                                                                                                                                                                                 |
| `request_clarification.py`          | **Request Clarification**         | Triggers an email to the submitter requesting additional information (when the Feedback Master flags the submission as needing clarification). This email contains a link to the JotForm for supplementary submission, including an embedded reference to correlate with the process.                                                                                                                                                                                                     |
| `notify_departments.py`             | **Notify Departments**            | For each department identified by the DMN decision, sends an email notification to the department’s representative. The email outlines the feedback context and includes a unique JotForm link for that department to submit their action plan. This script runs in a multi-instance fashion (once per department) and personalizes the message (e.g., addressing the department name and providing relevant details).                                                                    |
| `send_reminder_department.py`       | **Send Reminder (Department)**    | (If a department’s response is overdue) Sends a reminder email to the department representative. This script is triggered by a timer event in the process (especially for high-urgency cases with shorter deadlines) and reiterates the importance of providing the feedback measures.                                                                                                                                                                                                    |
| `compile_summary_report.py`         | **Compile Summary for Review**    | Gathers all department responses and prepares a summary for the Review Board. It might aggregate the measures into a single document or format the information into an email or Camunda form. This script ensures the Review Board has a consolidated view of the feedback and responses. *(If the Review Board uses Camunda Tasklist with a form, this script may simply attach data to process variables; if the Review Board is notified by email, it could generate a report email.)* |
| `send_email_review_board.py`        | **Notify Review Board**           | Sends a notification email to the Review Board (or its members) when a case is ready for review. The email may contain the summary of responses or a link to the Camunda task or report. This ensures the Review Board is aware of pending approvals.                                                                                                                                                                                                                                     |
| `store_feedback_in_db.py`           | **Store Feedback Record**         | Saves the details of the feedback case into a persistent storage (the script name uses “db” to indicate database, but in our implementation this refers to an Excel file acting as a data store). When the process is completed, this script writes a record containing the feedback data, departmental actions, and review outcome to an Excel workbook (the “Documentation of department measures” data store) for archival and reporting purposes.                                     |
| `terminate_terminated_instances.py` | **Cleanup Instances** *(utility)* | **(Utility script)** Periodically checks for and cleans up any process instances that were terminated or stuck. This maintenance script isn’t part of the main process flow; it was used during development to ensure no orphaned instances remain in Camunda (for example, to close processes that were manually terminated during testing).                                                                                                                                             |

The naming of scripts reflects their function in the process. These Python scripts utilize Camunda’s External Task pattern: the BPMN service tasks are configured with camunda:type="external" and a specific camunda:topic name, and each Python worker subscribes to one topic. When Camunda reaches a service task, it creates an external task instance; the corresponding Python worker fetches the task, executes the required action (sending email, updating record, etc.), and then completes the task via Camunda’s REST API. This design makes the system modular – e.g., the email-sending functionality can be updated in the Python code without altering the BPMN model. It also improves robustness, as the Camunda engine can re-queue a service task if a worker fails or if the action needs to be retried. Standard libraries such as smtplib (for SMTP email) and openpyxl (for Excel operations) were used in these scripts. A shared configuration module (e.g., a constants.py or SupportFunctions.py) contains settings like email server credentials and common functions, to avoid duplication across scripts.
